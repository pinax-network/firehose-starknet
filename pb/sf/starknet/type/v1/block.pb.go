// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: sf/starknet/type/v1/block.proto

package pbstarknet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// specifies whether the data of this block is published via blob data or calldata
type L1_DA_MODE int32

const (
	L1_DA_MODE_BLOB     L1_DA_MODE = 0
	L1_DA_MODE_CALLDATA L1_DA_MODE = 1
)

// Enum value maps for L1_DA_MODE.
var (
	L1_DA_MODE_name = map[int32]string{
		0: "BLOB",
		1: "CALLDATA",
	}
	L1_DA_MODE_value = map[string]int32{
		"BLOB":     0,
		"CALLDATA": 1,
	}
)

func (x L1_DA_MODE) Enum() *L1_DA_MODE {
	p := new(L1_DA_MODE)
	*p = x
	return p
}

func (x L1_DA_MODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (L1_DA_MODE) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_starknet_type_v1_block_proto_enumTypes[0].Descriptor()
}

func (L1_DA_MODE) Type() protoreflect.EnumType {
	return &file_sf_starknet_type_v1_block_proto_enumTypes[0]
}

func (x L1_DA_MODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use L1_DA_MODE.Descriptor instead.
func (L1_DA_MODE) EnumDescriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{0}
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash   string `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber uint64 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// specifies whether the data of this block is published via blob data or calldata
	L1DaMode L1_DA_MODE `protobuf:"varint,3,opt,name=l1_da_mode,json=l1DaMode,proto3,enum=sf.starknet.type.v1.L1_DA_MODE" json:"l1_da_mode,omitempty"`
	// The new global state root
	NewRoot string `protobuf:"bytes,4,opt,name=new_root,json=newRoot,proto3" json:"new_root,omitempty"`
	// The hash of this block's parent
	ParentHash string `protobuf:"bytes,5,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	// The StarkNet identity of the sequencer submitting this block
	SequencerAddress string `protobuf:"bytes,6,opt,name=sequencer_address,json=sequencerAddress,proto3" json:"sequencer_address,omitempty"`
	// Semver of the current Starknet protocol
	StarknetVersion string `protobuf:"bytes,7,opt,name=starknet_version,json=starknetVersion,proto3" json:"starknet_version,omitempty"`
	// The time in which the block was created
	Timestamp uint64 `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The price of l1 data gas in the block
	L1DataGasPrice *L1GasPrice `protobuf:"bytes,20,opt,name=l1_data_gas_price,json=l1DataGasPrice,proto3" json:"l1_data_gas_price,omitempty"`
	// The price of l1 gas in the block
	L1GasPrice *L1GasPrice `protobuf:"bytes,21,opt,name=l1_gas_price,json=l1GasPrice,proto3" json:"l1_gas_price,omitempty"`
	// The transactions in this block
	Transaction []*TransactionWithReceipt `protobuf:"bytes,30,rep,name=transaction,proto3" json:"transaction,omitempty"`
	StateUpdate *StateUpdate              `protobuf:"bytes,40,opt,name=state_update,json=stateUpdate,proto3" json:"state_update,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *Block) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Block) GetL1DaMode() L1_DA_MODE {
	if x != nil {
		return x.L1DaMode
	}
	return L1_DA_MODE_BLOB
}

func (x *Block) GetNewRoot() string {
	if x != nil {
		return x.NewRoot
	}
	return ""
}

func (x *Block) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *Block) GetSequencerAddress() string {
	if x != nil {
		return x.SequencerAddress
	}
	return ""
}

func (x *Block) GetStarknetVersion() string {
	if x != nil {
		return x.StarknetVersion
	}
	return ""
}

func (x *Block) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Block) GetL1DataGasPrice() *L1GasPrice {
	if x != nil {
		return x.L1DataGasPrice
	}
	return nil
}

func (x *Block) GetL1GasPrice() *L1GasPrice {
	if x != nil {
		return x.L1GasPrice
	}
	return nil
}

func (x *Block) GetTransaction() []*TransactionWithReceipt {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *Block) GetStateUpdate() *StateUpdate {
	if x != nil {
		return x.StateUpdate
	}
	return nil
}

type L1GasPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceInFri string `protobuf:"bytes,1,opt,name=price_in_fri,json=priceInFri,proto3" json:"price_in_fri,omitempty"`
	PriceInWei string `protobuf:"bytes,2,opt,name=price_in_wei,json=priceInWei,proto3" json:"price_in_wei,omitempty"`
}

func (x *L1GasPrice) Reset() {
	*x = L1GasPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L1GasPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L1GasPrice) ProtoMessage() {}

func (x *L1GasPrice) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L1GasPrice.ProtoReflect.Descriptor instead.
func (*L1GasPrice) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{1}
}

func (x *L1GasPrice) GetPriceInFri() string {
	if x != nil {
		return x.PriceInFri
	}
	return ""
}

func (x *L1GasPrice) GetPriceInWei() string {
	if x != nil {
		return x.PriceInWei
	}
	return ""
}

type TransactionWithReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Transaction:
	//
	//	*TransactionWithReceipt_InvokeTransactionV0
	//	*TransactionWithReceipt_InvokeTransactionV1
	//	*TransactionWithReceipt_InvokeTransactionV3
	//	*TransactionWithReceipt_L1HandlerTransaction
	//	*TransactionWithReceipt_DeclareTransactionV0
	//	*TransactionWithReceipt_DeclareTransactionV1
	//	*TransactionWithReceipt_DeclareTransactionV2
	//	*TransactionWithReceipt_DeclareTransactionV3
	//	*TransactionWithReceipt_DeployTransactionV0
	//	*TransactionWithReceipt_DeployAccountTransactionV1
	//	*TransactionWithReceipt_DeployAccountTransactionV3
	Transaction isTransactionWithReceipt_Transaction `protobuf_oneof:"transaction"`
	Receipt     *TransactionReceipt                  `protobuf:"bytes,12,opt,name=receipt,proto3" json:"receipt,omitempty"`
}

func (x *TransactionWithReceipt) Reset() {
	*x = TransactionWithReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionWithReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionWithReceipt) ProtoMessage() {}

func (x *TransactionWithReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionWithReceipt.ProtoReflect.Descriptor instead.
func (*TransactionWithReceipt) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{2}
}

func (m *TransactionWithReceipt) GetTransaction() isTransactionWithReceipt_Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (x *TransactionWithReceipt) GetInvokeTransactionV0() *InvokeTransactionV0 {
	if x, ok := x.GetTransaction().(*TransactionWithReceipt_InvokeTransactionV0); ok {
		return x.InvokeTransactionV0
	}
	return nil
}

func (x *TransactionWithReceipt) GetInvokeTransactionV1() *InvokeTransactionV1 {
	if x, ok := x.GetTransaction().(*TransactionWithReceipt_InvokeTransactionV1); ok {
		return x.InvokeTransactionV1
	}
	return nil
}

func (x *TransactionWithReceipt) GetInvokeTransactionV3() *InvokeTransactionV3 {
	if x, ok := x.GetTransaction().(*TransactionWithReceipt_InvokeTransactionV3); ok {
		return x.InvokeTransactionV3
	}
	return nil
}

func (x *TransactionWithReceipt) GetL1HandlerTransaction() *L1HandlerTransaction {
	if x, ok := x.GetTransaction().(*TransactionWithReceipt_L1HandlerTransaction); ok {
		return x.L1HandlerTransaction
	}
	return nil
}

func (x *TransactionWithReceipt) GetDeclareTransactionV0() *DeclareTransactionV0 {
	if x, ok := x.GetTransaction().(*TransactionWithReceipt_DeclareTransactionV0); ok {
		return x.DeclareTransactionV0
	}
	return nil
}

func (x *TransactionWithReceipt) GetDeclareTransactionV1() *DeclareTransactionV1 {
	if x, ok := x.GetTransaction().(*TransactionWithReceipt_DeclareTransactionV1); ok {
		return x.DeclareTransactionV1
	}
	return nil
}

func (x *TransactionWithReceipt) GetDeclareTransactionV2() *DeclareTransactionV2 {
	if x, ok := x.GetTransaction().(*TransactionWithReceipt_DeclareTransactionV2); ok {
		return x.DeclareTransactionV2
	}
	return nil
}

func (x *TransactionWithReceipt) GetDeclareTransactionV3() *DeclareTransactionV3 {
	if x, ok := x.GetTransaction().(*TransactionWithReceipt_DeclareTransactionV3); ok {
		return x.DeclareTransactionV3
	}
	return nil
}

func (x *TransactionWithReceipt) GetDeployTransactionV0() *DeployTransactionV0 {
	if x, ok := x.GetTransaction().(*TransactionWithReceipt_DeployTransactionV0); ok {
		return x.DeployTransactionV0
	}
	return nil
}

func (x *TransactionWithReceipt) GetDeployAccountTransactionV1() *DeployAccountTransactionV1 {
	if x, ok := x.GetTransaction().(*TransactionWithReceipt_DeployAccountTransactionV1); ok {
		return x.DeployAccountTransactionV1
	}
	return nil
}

func (x *TransactionWithReceipt) GetDeployAccountTransactionV3() *DeployAccountTransactionV3 {
	if x, ok := x.GetTransaction().(*TransactionWithReceipt_DeployAccountTransactionV3); ok {
		return x.DeployAccountTransactionV3
	}
	return nil
}

func (x *TransactionWithReceipt) GetReceipt() *TransactionReceipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

type isTransactionWithReceipt_Transaction interface {
	isTransactionWithReceipt_Transaction()
}

type TransactionWithReceipt_InvokeTransactionV0 struct {
	InvokeTransactionV0 *InvokeTransactionV0 `protobuf:"bytes,1,opt,name=invoke_transaction_v0,json=invokeTransactionV0,proto3,oneof"`
}

type TransactionWithReceipt_InvokeTransactionV1 struct {
	InvokeTransactionV1 *InvokeTransactionV1 `protobuf:"bytes,2,opt,name=invoke_transaction_v1,json=invokeTransactionV1,proto3,oneof"`
}

type TransactionWithReceipt_InvokeTransactionV3 struct {
	InvokeTransactionV3 *InvokeTransactionV3 `protobuf:"bytes,3,opt,name=invoke_transaction_v3,json=invokeTransactionV3,proto3,oneof"`
}

type TransactionWithReceipt_L1HandlerTransaction struct {
	L1HandlerTransaction *L1HandlerTransaction `protobuf:"bytes,4,opt,name=l1_handler_transaction,json=l1HandlerTransaction,proto3,oneof"` //not versioned in api definition
}

type TransactionWithReceipt_DeclareTransactionV0 struct {
	DeclareTransactionV0 *DeclareTransactionV0 `protobuf:"bytes,5,opt,name=declare_transaction_v0,json=declareTransactionV0,proto3,oneof"`
}

type TransactionWithReceipt_DeclareTransactionV1 struct {
	DeclareTransactionV1 *DeclareTransactionV1 `protobuf:"bytes,6,opt,name=declare_transaction_v1,json=declareTransactionV1,proto3,oneof"`
}

type TransactionWithReceipt_DeclareTransactionV2 struct {
	DeclareTransactionV2 *DeclareTransactionV2 `protobuf:"bytes,7,opt,name=declare_transaction_v2,json=declareTransactionV2,proto3,oneof"`
}

type TransactionWithReceipt_DeclareTransactionV3 struct {
	DeclareTransactionV3 *DeclareTransactionV3 `protobuf:"bytes,8,opt,name=declare_transaction_v3,json=declareTransactionV3,proto3,oneof"`
}

type TransactionWithReceipt_DeployTransactionV0 struct {
	DeployTransactionV0 *DeployTransactionV0 `protobuf:"bytes,9,opt,name=deploy_transaction_v0,json=deployTransactionV0,proto3,oneof"`
}

type TransactionWithReceipt_DeployAccountTransactionV1 struct {
	DeployAccountTransactionV1 *DeployAccountTransactionV1 `protobuf:"bytes,10,opt,name=deploy_account_transaction_v1,json=deployAccountTransactionV1,proto3,oneof"`
}

type TransactionWithReceipt_DeployAccountTransactionV3 struct {
	DeployAccountTransactionV3 *DeployAccountTransactionV3 `protobuf:"bytes,11,opt,name=deploy_account_transaction_v3,json=deployAccountTransactionV3,proto3,oneof"`
}

func (*TransactionWithReceipt_InvokeTransactionV0) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_InvokeTransactionV1) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_InvokeTransactionV3) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_L1HandlerTransaction) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_DeclareTransactionV0) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_DeclareTransactionV1) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_DeclareTransactionV2) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_DeclareTransactionV3) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_DeployTransactionV0) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_DeployAccountTransactionV1) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_DeployAccountTransactionV3) isTransactionWithReceipt_Transaction() {}

type TransactionReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string              `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	TransactionHash    string              `protobuf:"bytes,2,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	MessageHash        string              `protobuf:"bytes,3,opt,name=message_hash,json=messageHash,proto3" json:"message_hash,omitempty"`
	ContractAddress    string              `protobuf:"bytes,4,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	ActualFee          *ActualFee          `protobuf:"bytes,5,opt,name=actual_fee,json=actualFee,proto3" json:"actual_fee,omitempty"`
	ExecutionStatus    string              `protobuf:"bytes,6,opt,name=execution_status,json=executionStatus,proto3" json:"execution_status,omitempty"`
	MessagesSent       []*MessagesSent     `protobuf:"bytes,8,rep,name=messages_sent,json=messagesSent,proto3" json:"messages_sent,omitempty"`
	RevertReason       string              `protobuf:"bytes,9,opt,name=revert_reason,json=revertReason,proto3" json:"revert_reason,omitempty"`
	Events             []*Event            `protobuf:"bytes,10,rep,name=events,proto3" json:"events,omitempty"`
	ExecutionResources *ExecutionResources `protobuf:"bytes,11,opt,name=execution_resources,json=executionResources,proto3" json:"execution_resources,omitempty"`
}

func (x *TransactionReceipt) Reset() {
	*x = TransactionReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionReceipt) ProtoMessage() {}

func (x *TransactionReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionReceipt.ProtoReflect.Descriptor instead.
func (*TransactionReceipt) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionReceipt) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TransactionReceipt) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *TransactionReceipt) GetMessageHash() string {
	if x != nil {
		return x.MessageHash
	}
	return ""
}

func (x *TransactionReceipt) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *TransactionReceipt) GetActualFee() *ActualFee {
	if x != nil {
		return x.ActualFee
	}
	return nil
}

func (x *TransactionReceipt) GetExecutionStatus() string {
	if x != nil {
		return x.ExecutionStatus
	}
	return ""
}

func (x *TransactionReceipt) GetMessagesSent() []*MessagesSent {
	if x != nil {
		return x.MessagesSent
	}
	return nil
}

func (x *TransactionReceipt) GetRevertReason() string {
	if x != nil {
		return x.RevertReason
	}
	return ""
}

func (x *TransactionReceipt) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *TransactionReceipt) GetExecutionResources() *ExecutionResources {
	if x != nil {
		return x.ExecutionResources
	}
	return nil
}

type MessagesSent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAddress string   `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress   string   `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Payload     []string `protobuf:"bytes,3,rep,name=payload,proto3" json:"payload,omitempty"`
}

func (x *MessagesSent) Reset() {
	*x = MessagesSent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagesSent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagesSent) ProtoMessage() {}

func (x *MessagesSent) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagesSent.ProtoReflect.Descriptor instead.
func (*MessagesSent) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{4}
}

func (x *MessagesSent) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *MessagesSent) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *MessagesSent) GetPayload() []string {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAddress string   `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	Keys        []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Data        []string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{5}
}

func (x *Event) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *Event) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Event) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

type ExecutionResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataAvailability              *DataAvailability `protobuf:"bytes,1,opt,name=data_availability,json=dataAvailability,proto3" json:"data_availability,omitempty"`
	Steps                         uint64            `protobuf:"varint,2,opt,name=steps,proto3" json:"steps,omitempty"`
	MemoryHoles                   uint64            `protobuf:"varint,3,opt,name=memory_holes,json=memoryHoles,proto3" json:"memory_holes,omitempty"`
	RangeCheckBuiltinApplications uint64            `protobuf:"varint,4,opt,name=range_check_builtin_applications,json=rangeCheckBuiltinApplications,proto3" json:"range_check_builtin_applications,omitempty"`
	PedersenBuiltinApplications   uint64            `protobuf:"varint,5,opt,name=pedersen_builtin_applications,json=pedersenBuiltinApplications,proto3" json:"pedersen_builtin_applications,omitempty"`
	PoseidonBuiltinApplications   uint64            `protobuf:"varint,6,opt,name=poseidon_builtin_applications,json=poseidonBuiltinApplications,proto3" json:"poseidon_builtin_applications,omitempty"`
	EcOpBuiltinApplications       uint64            `protobuf:"varint,7,opt,name=ec_op_builtin_applications,json=ecOpBuiltinApplications,proto3" json:"ec_op_builtin_applications,omitempty"`
	EcdsaBuiltinApplications      uint64            `protobuf:"varint,8,opt,name=ecdsa_builtin_applications,json=ecdsaBuiltinApplications,proto3" json:"ecdsa_builtin_applications,omitempty"`
	BitwiseBuiltinApplications    uint64            `protobuf:"varint,9,opt,name=bitwise_builtin_applications,json=bitwiseBuiltinApplications,proto3" json:"bitwise_builtin_applications,omitempty"`
	KeccakBuiltinApplications     uint64            `protobuf:"varint,10,opt,name=keccak_builtin_applications,json=keccakBuiltinApplications,proto3" json:"keccak_builtin_applications,omitempty"`
	SegmentArenaBuiltin           uint64            `protobuf:"varint,11,opt,name=segment_arena_builtin,json=segmentArenaBuiltin,proto3" json:"segment_arena_builtin,omitempty"`
}

func (x *ExecutionResources) Reset() {
	*x = ExecutionResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionResources) ProtoMessage() {}

func (x *ExecutionResources) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionResources.ProtoReflect.Descriptor instead.
func (*ExecutionResources) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{6}
}

func (x *ExecutionResources) GetDataAvailability() *DataAvailability {
	if x != nil {
		return x.DataAvailability
	}
	return nil
}

func (x *ExecutionResources) GetSteps() uint64 {
	if x != nil {
		return x.Steps
	}
	return 0
}

func (x *ExecutionResources) GetMemoryHoles() uint64 {
	if x != nil {
		return x.MemoryHoles
	}
	return 0
}

func (x *ExecutionResources) GetRangeCheckBuiltinApplications() uint64 {
	if x != nil {
		return x.RangeCheckBuiltinApplications
	}
	return 0
}

func (x *ExecutionResources) GetPedersenBuiltinApplications() uint64 {
	if x != nil {
		return x.PedersenBuiltinApplications
	}
	return 0
}

func (x *ExecutionResources) GetPoseidonBuiltinApplications() uint64 {
	if x != nil {
		return x.PoseidonBuiltinApplications
	}
	return 0
}

func (x *ExecutionResources) GetEcOpBuiltinApplications() uint64 {
	if x != nil {
		return x.EcOpBuiltinApplications
	}
	return 0
}

func (x *ExecutionResources) GetEcdsaBuiltinApplications() uint64 {
	if x != nil {
		return x.EcdsaBuiltinApplications
	}
	return 0
}

func (x *ExecutionResources) GetBitwiseBuiltinApplications() uint64 {
	if x != nil {
		return x.BitwiseBuiltinApplications
	}
	return 0
}

func (x *ExecutionResources) GetKeccakBuiltinApplications() uint64 {
	if x != nil {
		return x.KeccakBuiltinApplications
	}
	return 0
}

func (x *ExecutionResources) GetSegmentArenaBuiltin() uint64 {
	if x != nil {
		return x.SegmentArenaBuiltin
	}
	return 0
}

type InvokeTransactionV0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxFee             string   `protobuf:"bytes,2,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	Version            string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Signature          []string `protobuf:"bytes,4,rep,name=signature,proto3" json:"signature,omitempty"`
	ContractAddress    string   `protobuf:"bytes,5,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	EntryPointSelector string   `protobuf:"bytes,6,opt,name=entry_point_selector,json=entryPointSelector,proto3" json:"entry_point_selector,omitempty"`
	Calldata           []string `protobuf:"bytes,7,rep,name=calldata,proto3" json:"calldata,omitempty"`
}

func (x *InvokeTransactionV0) Reset() {
	*x = InvokeTransactionV0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeTransactionV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeTransactionV0) ProtoMessage() {}

func (x *InvokeTransactionV0) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeTransactionV0.ProtoReflect.Descriptor instead.
func (*InvokeTransactionV0) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{7}
}

func (x *InvokeTransactionV0) GetMaxFee() string {
	if x != nil {
		return x.MaxFee
	}
	return ""
}

func (x *InvokeTransactionV0) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InvokeTransactionV0) GetSignature() []string {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *InvokeTransactionV0) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *InvokeTransactionV0) GetEntryPointSelector() string {
	if x != nil {
		return x.EntryPointSelector
	}
	return ""
}

func (x *InvokeTransactionV0) GetCalldata() []string {
	if x != nil {
		return x.Calldata
	}
	return nil
}

type InvokeTransactionV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderAddress string   `protobuf:"bytes,2,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	Calldata      []string `protobuf:"bytes,3,rep,name=calldata,proto3" json:"calldata,omitempty"`
	MaxFee        string   `protobuf:"bytes,4,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	Version       string   `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Signature     []string `protobuf:"bytes,6,rep,name=signature,proto3" json:"signature,omitempty"`
	Nonce         string   `protobuf:"bytes,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *InvokeTransactionV1) Reset() {
	*x = InvokeTransactionV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeTransactionV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeTransactionV1) ProtoMessage() {}

func (x *InvokeTransactionV1) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeTransactionV1.ProtoReflect.Descriptor instead.
func (*InvokeTransactionV1) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{8}
}

func (x *InvokeTransactionV1) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

func (x *InvokeTransactionV1) GetCalldata() []string {
	if x != nil {
		return x.Calldata
	}
	return nil
}

func (x *InvokeTransactionV1) GetMaxFee() string {
	if x != nil {
		return x.MaxFee
	}
	return ""
}

func (x *InvokeTransactionV1) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InvokeTransactionV1) GetSignature() []string {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *InvokeTransactionV1) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type InvokeTransactionV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderAddress             string          `protobuf:"bytes,2,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	Calldata                  []string        `protobuf:"bytes,3,rep,name=calldata,proto3" json:"calldata,omitempty"`
	Version                   string          `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Signature                 []string        `protobuf:"bytes,5,rep,name=signature,proto3" json:"signature,omitempty"`
	Nonce                     string          `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ResourceBounds            *ResourceBounds `protobuf:"bytes,7,opt,name=resource_bounds,json=resourceBounds,proto3" json:"resource_bounds,omitempty"`
	Tip                       string          `protobuf:"bytes,8,opt,name=tip,proto3" json:"tip,omitempty"`
	PaymasterData             []string        `protobuf:"bytes,9,rep,name=paymaster_data,json=paymasterData,proto3" json:"paymaster_data,omitempty"`
	AccountDeploymentData     []string        `protobuf:"bytes,10,rep,name=account_deployment_data,json=accountDeploymentData,proto3" json:"account_deployment_data,omitempty"`
	NonceDataAvailabilityMode string          `protobuf:"bytes,11,opt,name=nonce_data_availability_mode,json=nonceDataAvailabilityMode,proto3" json:"nonce_data_availability_mode,omitempty"`
	FeeDataAvailabilityMode   string          `protobuf:"bytes,12,opt,name=fee_data_availability_mode,json=feeDataAvailabilityMode,proto3" json:"fee_data_availability_mode,omitempty"`
}

func (x *InvokeTransactionV3) Reset() {
	*x = InvokeTransactionV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeTransactionV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeTransactionV3) ProtoMessage() {}

func (x *InvokeTransactionV3) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeTransactionV3.ProtoReflect.Descriptor instead.
func (*InvokeTransactionV3) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{9}
}

func (x *InvokeTransactionV3) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

func (x *InvokeTransactionV3) GetCalldata() []string {
	if x != nil {
		return x.Calldata
	}
	return nil
}

func (x *InvokeTransactionV3) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InvokeTransactionV3) GetSignature() []string {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *InvokeTransactionV3) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *InvokeTransactionV3) GetResourceBounds() *ResourceBounds {
	if x != nil {
		return x.ResourceBounds
	}
	return nil
}

func (x *InvokeTransactionV3) GetTip() string {
	if x != nil {
		return x.Tip
	}
	return ""
}

func (x *InvokeTransactionV3) GetPaymasterData() []string {
	if x != nil {
		return x.PaymasterData
	}
	return nil
}

func (x *InvokeTransactionV3) GetAccountDeploymentData() []string {
	if x != nil {
		return x.AccountDeploymentData
	}
	return nil
}

func (x *InvokeTransactionV3) GetNonceDataAvailabilityMode() string {
	if x != nil {
		return x.NonceDataAvailabilityMode
	}
	return ""
}

func (x *InvokeTransactionV3) GetFeeDataAvailabilityMode() string {
	if x != nil {
		return x.FeeDataAvailabilityMode
	}
	return ""
}

type L1HandlerTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version            string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Nonce              string   `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ContractAddress    string   `protobuf:"bytes,4,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	EntryPointSelector string   `protobuf:"bytes,5,opt,name=entry_point_selector,json=entryPointSelector,proto3" json:"entry_point_selector,omitempty"`
	Calldata           []string `protobuf:"bytes,6,rep,name=calldata,proto3" json:"calldata,omitempty"`
}

func (x *L1HandlerTransaction) Reset() {
	*x = L1HandlerTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L1HandlerTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L1HandlerTransaction) ProtoMessage() {}

func (x *L1HandlerTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L1HandlerTransaction.ProtoReflect.Descriptor instead.
func (*L1HandlerTransaction) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{10}
}

func (x *L1HandlerTransaction) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *L1HandlerTransaction) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *L1HandlerTransaction) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *L1HandlerTransaction) GetEntryPointSelector() string {
	if x != nil {
		return x.EntryPointSelector
	}
	return ""
}

func (x *L1HandlerTransaction) GetCalldata() []string {
	if x != nil {
		return x.Calldata
	}
	return nil
}

type DeclareTransactionV0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderAddress string   `protobuf:"bytes,2,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	MaxFee        string   `protobuf:"bytes,3,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	Version       string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Signature     []string `protobuf:"bytes,5,rep,name=signature,proto3" json:"signature,omitempty"`
	ClassHash     string   `protobuf:"bytes,6,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
}

func (x *DeclareTransactionV0) Reset() {
	*x = DeclareTransactionV0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclareTransactionV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareTransactionV0) ProtoMessage() {}

func (x *DeclareTransactionV0) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareTransactionV0.ProtoReflect.Descriptor instead.
func (*DeclareTransactionV0) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{11}
}

func (x *DeclareTransactionV0) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

func (x *DeclareTransactionV0) GetMaxFee() string {
	if x != nil {
		return x.MaxFee
	}
	return ""
}

func (x *DeclareTransactionV0) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeclareTransactionV0) GetSignature() []string {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *DeclareTransactionV0) GetClassHash() string {
	if x != nil {
		return x.ClassHash
	}
	return ""
}

type DeclareTransactionV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderAddress string   `protobuf:"bytes,2,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	MaxFee        string   `protobuf:"bytes,3,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	Version       string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Signature     []string `protobuf:"bytes,5,rep,name=signature,proto3" json:"signature,omitempty"`
	Nonce         string   `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ClassHash     string   `protobuf:"bytes,7,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
}

func (x *DeclareTransactionV1) Reset() {
	*x = DeclareTransactionV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclareTransactionV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareTransactionV1) ProtoMessage() {}

func (x *DeclareTransactionV1) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareTransactionV1.ProtoReflect.Descriptor instead.
func (*DeclareTransactionV1) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{12}
}

func (x *DeclareTransactionV1) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

func (x *DeclareTransactionV1) GetMaxFee() string {
	if x != nil {
		return x.MaxFee
	}
	return ""
}

func (x *DeclareTransactionV1) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeclareTransactionV1) GetSignature() []string {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *DeclareTransactionV1) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *DeclareTransactionV1) GetClassHash() string {
	if x != nil {
		return x.ClassHash
	}
	return ""
}

type DeclareTransactionV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderAddress string   `protobuf:"bytes,2,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	MaxFee        string   `protobuf:"bytes,3,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	Version       string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Signature     []string `protobuf:"bytes,5,rep,name=signature,proto3" json:"signature,omitempty"`
	Nonce         string   `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ClassHash     string   `protobuf:"bytes,7,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
}

func (x *DeclareTransactionV2) Reset() {
	*x = DeclareTransactionV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclareTransactionV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareTransactionV2) ProtoMessage() {}

func (x *DeclareTransactionV2) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareTransactionV2.ProtoReflect.Descriptor instead.
func (*DeclareTransactionV2) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{13}
}

func (x *DeclareTransactionV2) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

func (x *DeclareTransactionV2) GetMaxFee() string {
	if x != nil {
		return x.MaxFee
	}
	return ""
}

func (x *DeclareTransactionV2) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeclareTransactionV2) GetSignature() []string {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *DeclareTransactionV2) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *DeclareTransactionV2) GetClassHash() string {
	if x != nil {
		return x.ClassHash
	}
	return ""
}

type DeclareTransactionV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderAddress             string          `protobuf:"bytes,2,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	CompiledClassHash         string          `protobuf:"bytes,3,opt,name=compiled_class_hash,json=compiledClassHash,proto3" json:"compiled_class_hash,omitempty"`
	Version                   string          `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Signature                 []string        `protobuf:"bytes,5,rep,name=signature,proto3" json:"signature,omitempty"`
	Nonce                     string          `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ClassHash                 string          `protobuf:"bytes,7,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	ResourceBounds            *ResourceBounds `protobuf:"bytes,8,opt,name=resource_bounds,json=resourceBounds,proto3" json:"resource_bounds,omitempty"`
	Tip                       string          `protobuf:"bytes,9,opt,name=tip,proto3" json:"tip,omitempty"`
	PaymasterData             []string        `protobuf:"bytes,10,rep,name=paymaster_data,json=paymasterData,proto3" json:"paymaster_data,omitempty"`
	AccountDeploymentData     []string        `protobuf:"bytes,11,rep,name=account_deployment_data,json=accountDeploymentData,proto3" json:"account_deployment_data,omitempty"`
	NonceDataAvailabilityMode string          `protobuf:"bytes,12,opt,name=nonce_data_availability_mode,json=nonceDataAvailabilityMode,proto3" json:"nonce_data_availability_mode,omitempty"`
	FeeDataAvailabilityMode   string          `protobuf:"bytes,13,opt,name=fee_data_availability_mode,json=feeDataAvailabilityMode,proto3" json:"fee_data_availability_mode,omitempty"`
}

func (x *DeclareTransactionV3) Reset() {
	*x = DeclareTransactionV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclareTransactionV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareTransactionV3) ProtoMessage() {}

func (x *DeclareTransactionV3) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareTransactionV3.ProtoReflect.Descriptor instead.
func (*DeclareTransactionV3) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{14}
}

func (x *DeclareTransactionV3) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

func (x *DeclareTransactionV3) GetCompiledClassHash() string {
	if x != nil {
		return x.CompiledClassHash
	}
	return ""
}

func (x *DeclareTransactionV3) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeclareTransactionV3) GetSignature() []string {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *DeclareTransactionV3) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *DeclareTransactionV3) GetClassHash() string {
	if x != nil {
		return x.ClassHash
	}
	return ""
}

func (x *DeclareTransactionV3) GetResourceBounds() *ResourceBounds {
	if x != nil {
		return x.ResourceBounds
	}
	return nil
}

func (x *DeclareTransactionV3) GetTip() string {
	if x != nil {
		return x.Tip
	}
	return ""
}

func (x *DeclareTransactionV3) GetPaymasterData() []string {
	if x != nil {
		return x.PaymasterData
	}
	return nil
}

func (x *DeclareTransactionV3) GetAccountDeploymentData() []string {
	if x != nil {
		return x.AccountDeploymentData
	}
	return nil
}

func (x *DeclareTransactionV3) GetNonceDataAvailabilityMode() string {
	if x != nil {
		return x.NonceDataAvailabilityMode
	}
	return ""
}

func (x *DeclareTransactionV3) GetFeeDataAvailabilityMode() string {
	if x != nil {
		return x.FeeDataAvailabilityMode
	}
	return ""
}

type DeployTransactionV0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version             string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ContractAddressSalt string   `protobuf:"bytes,2,opt,name=contract_address_salt,json=contractAddressSalt,proto3" json:"contract_address_salt,omitempty"`
	ConstructorCalldata []string `protobuf:"bytes,3,rep,name=constructor_calldata,json=constructorCalldata,proto3" json:"constructor_calldata,omitempty"`
	ClassHash           string   `protobuf:"bytes,4,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
}

func (x *DeployTransactionV0) Reset() {
	*x = DeployTransactionV0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployTransactionV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployTransactionV0) ProtoMessage() {}

func (x *DeployTransactionV0) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployTransactionV0.ProtoReflect.Descriptor instead.
func (*DeployTransactionV0) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{15}
}

func (x *DeployTransactionV0) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeployTransactionV0) GetContractAddressSalt() string {
	if x != nil {
		return x.ContractAddressSalt
	}
	return ""
}

func (x *DeployTransactionV0) GetConstructorCalldata() []string {
	if x != nil {
		return x.ConstructorCalldata
	}
	return nil
}

func (x *DeployTransactionV0) GetClassHash() string {
	if x != nil {
		return x.ClassHash
	}
	return ""
}

type DeployAccountTransactionV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxFee              string   `protobuf:"bytes,2,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	Version             string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Signature           []string `protobuf:"bytes,4,rep,name=signature,proto3" json:"signature,omitempty"`
	Nonce               string   `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ContractAddressSalt string   `protobuf:"bytes,6,opt,name=contract_address_salt,json=contractAddressSalt,proto3" json:"contract_address_salt,omitempty"`
	ConstructorCalldata []string `protobuf:"bytes,7,rep,name=constructor_calldata,json=constructorCalldata,proto3" json:"constructor_calldata,omitempty"`
	ClassHash           string   `protobuf:"bytes,8,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
}

func (x *DeployAccountTransactionV1) Reset() {
	*x = DeployAccountTransactionV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployAccountTransactionV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployAccountTransactionV1) ProtoMessage() {}

func (x *DeployAccountTransactionV1) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployAccountTransactionV1.ProtoReflect.Descriptor instead.
func (*DeployAccountTransactionV1) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{16}
}

func (x *DeployAccountTransactionV1) GetMaxFee() string {
	if x != nil {
		return x.MaxFee
	}
	return ""
}

func (x *DeployAccountTransactionV1) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeployAccountTransactionV1) GetSignature() []string {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *DeployAccountTransactionV1) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *DeployAccountTransactionV1) GetContractAddressSalt() string {
	if x != nil {
		return x.ContractAddressSalt
	}
	return ""
}

func (x *DeployAccountTransactionV1) GetConstructorCalldata() []string {
	if x != nil {
		return x.ConstructorCalldata
	}
	return nil
}

func (x *DeployAccountTransactionV1) GetClassHash() string {
	if x != nil {
		return x.ClassHash
	}
	return ""
}

type DeployAccountTransactionV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                   string          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Signature                 []string        `protobuf:"bytes,3,rep,name=signature,proto3" json:"signature,omitempty"`
	Nonce                     string          `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ContractAddressSalt       string          `protobuf:"bytes,5,opt,name=contract_address_salt,json=contractAddressSalt,proto3" json:"contract_address_salt,omitempty"`
	ClassHash                 string          `protobuf:"bytes,6,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	ResourceBounds            *ResourceBounds `protobuf:"bytes,7,opt,name=resource_bounds,json=resourceBounds,proto3" json:"resource_bounds,omitempty"`
	Tip                       string          `protobuf:"bytes,8,opt,name=tip,proto3" json:"tip,omitempty"`
	PaymasterData             []string        `protobuf:"bytes,9,rep,name=paymaster_data,json=paymasterData,proto3" json:"paymaster_data,omitempty"`
	NonceDataAvailabilityMode string          `protobuf:"bytes,11,opt,name=nonce_data_availability_mode,json=nonceDataAvailabilityMode,proto3" json:"nonce_data_availability_mode,omitempty"`
	FeeDataAvailabilityMode   string          `protobuf:"bytes,12,opt,name=fee_data_availability_mode,json=feeDataAvailabilityMode,proto3" json:"fee_data_availability_mode,omitempty"`
}

func (x *DeployAccountTransactionV3) Reset() {
	*x = DeployAccountTransactionV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployAccountTransactionV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployAccountTransactionV3) ProtoMessage() {}

func (x *DeployAccountTransactionV3) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployAccountTransactionV3.ProtoReflect.Descriptor instead.
func (*DeployAccountTransactionV3) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{17}
}

func (x *DeployAccountTransactionV3) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeployAccountTransactionV3) GetSignature() []string {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *DeployAccountTransactionV3) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *DeployAccountTransactionV3) GetContractAddressSalt() string {
	if x != nil {
		return x.ContractAddressSalt
	}
	return ""
}

func (x *DeployAccountTransactionV3) GetClassHash() string {
	if x != nil {
		return x.ClassHash
	}
	return ""
}

func (x *DeployAccountTransactionV3) GetResourceBounds() *ResourceBounds {
	if x != nil {
		return x.ResourceBounds
	}
	return nil
}

func (x *DeployAccountTransactionV3) GetTip() string {
	if x != nil {
		return x.Tip
	}
	return ""
}

func (x *DeployAccountTransactionV3) GetPaymasterData() []string {
	if x != nil {
		return x.PaymasterData
	}
	return nil
}

func (x *DeployAccountTransactionV3) GetNonceDataAvailabilityMode() string {
	if x != nil {
		return x.NonceDataAvailabilityMode
	}
	return ""
}

func (x *DeployAccountTransactionV3) GetFeeDataAvailabilityMode() string {
	if x != nil {
		return x.FeeDataAvailabilityMode
	}
	return ""
}

type ResourceBounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L1Gas *Resource `protobuf:"bytes,1,opt,name=L1Gas,proto3" json:"L1Gas,omitempty"`
	L2Gas *Resource `protobuf:"bytes,2,opt,name=L2Gas,proto3" json:"L2Gas,omitempty"`
}

func (x *ResourceBounds) Reset() {
	*x = ResourceBounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceBounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceBounds) ProtoMessage() {}

func (x *ResourceBounds) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceBounds.ProtoReflect.Descriptor instead.
func (*ResourceBounds) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{18}
}

func (x *ResourceBounds) GetL1Gas() *Resource {
	if x != nil {
		return x.L1Gas
	}
	return nil
}

func (x *ResourceBounds) GetL2Gas() *Resource {
	if x != nil {
		return x.L2Gas
	}
	return nil
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxAmount       string `protobuf:"bytes,1,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
	MaxPricePerUnit string `protobuf:"bytes,2,opt,name=max_price_per_unit,json=maxPricePerUnit,proto3" json:"max_price_per_unit,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{19}
}

func (x *Resource) GetMaxAmount() string {
	if x != nil {
		return x.MaxAmount
	}
	return ""
}

func (x *Resource) GetMaxPricePerUnit() string {
	if x != nil {
		return x.MaxPricePerUnit
	}
	return ""
}

type Receipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActualFee *ActualFee `protobuf:"bytes,1,opt,name=actual_fee,json=actualFee,proto3" json:"actual_fee,omitempty"`
}

func (x *Receipt) Reset() {
	*x = Receipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Receipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receipt) ProtoMessage() {}

func (x *Receipt) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receipt.ProtoReflect.Descriptor instead.
func (*Receipt) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{20}
}

func (x *Receipt) GetActualFee() *ActualFee {
	if x != nil {
		return x.ActualFee
	}
	return nil
}

type ActualFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Unit   string `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *ActualFee) Reset() {
	*x = ActualFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActualFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActualFee) ProtoMessage() {}

func (x *ActualFee) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActualFee.ProtoReflect.Descriptor instead.
func (*ActualFee) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{21}
}

func (x *ActualFee) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ActualFee) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

type DataAvailability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L1DataGas uint64 `protobuf:"varint,1,opt,name=l1_data_gas,json=l1DataGas,proto3" json:"l1_data_gas,omitempty"`
	L1Gas     uint64 `protobuf:"varint,2,opt,name=l1_gas,json=l1Gas,proto3" json:"l1_gas,omitempty"`
}

func (x *DataAvailability) Reset() {
	*x = DataAvailability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataAvailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAvailability) ProtoMessage() {}

func (x *DataAvailability) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAvailability.ProtoReflect.Descriptor instead.
func (*DataAvailability) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{22}
}

func (x *DataAvailability) GetL1DataGas() uint64 {
	if x != nil {
		return x.L1DataGas
	}
	return 0
}

func (x *DataAvailability) GetL1Gas() uint64 {
	if x != nil {
		return x.L1Gas
	}
	return 0
}

type StateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldRoot   string     `protobuf:"bytes,1,opt,name=old_root,json=oldRoot,proto3" json:"old_root,omitempty"`
	NewRoot   string     `protobuf:"bytes,2,opt,name=new_root,json=newRoot,proto3" json:"new_root,omitempty"`
	StateDiff *StateDiff `protobuf:"bytes,3,opt,name=state_diff,json=stateDiff,proto3" json:"state_diff,omitempty"`
}

func (x *StateUpdate) Reset() {
	*x = StateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateUpdate) ProtoMessage() {}

func (x *StateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateUpdate.ProtoReflect.Descriptor instead.
func (*StateUpdate) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{23}
}

func (x *StateUpdate) GetOldRoot() string {
	if x != nil {
		return x.OldRoot
	}
	return ""
}

func (x *StateUpdate) GetNewRoot() string {
	if x != nil {
		return x.NewRoot
	}
	return ""
}

func (x *StateUpdate) GetStateDiff() *StateDiff {
	if x != nil {
		return x.StateDiff
	}
	return nil
}

type StateDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageDiffs              []*ContractStorageDiff `protobuf:"bytes,1,rep,name=storage_diffs,json=storageDiffs,proto3" json:"storage_diffs,omitempty"`
	DeprecatedDeclaredClasses []string               `protobuf:"bytes,2,rep,name=deprecated_declared_classes,json=deprecatedDeclaredClasses,proto3" json:"deprecated_declared_classes,omitempty"`
	DeclaredClasses           []*DeclaredClass       `protobuf:"bytes,3,rep,name=declared_classes,json=declaredClasses,proto3" json:"declared_classes,omitempty"`
	DeployedContracts         []*DeployedContract    `protobuf:"bytes,4,rep,name=deployed_contracts,json=deployedContracts,proto3" json:"deployed_contracts,omitempty"`
	ReplacedClasses           []*ReplacedClass       `protobuf:"bytes,5,rep,name=replaced_classes,json=replacedClasses,proto3" json:"replaced_classes,omitempty"`
	NonceDiffs                []*NonceDiff           `protobuf:"bytes,6,rep,name=nonce_diffs,json=nonceDiffs,proto3" json:"nonce_diffs,omitempty"` //Do we need this?
}

func (x *StateDiff) Reset() {
	*x = StateDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateDiff) ProtoMessage() {}

func (x *StateDiff) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateDiff.ProtoReflect.Descriptor instead.
func (*StateDiff) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{24}
}

func (x *StateDiff) GetStorageDiffs() []*ContractStorageDiff {
	if x != nil {
		return x.StorageDiffs
	}
	return nil
}

func (x *StateDiff) GetDeprecatedDeclaredClasses() []string {
	if x != nil {
		return x.DeprecatedDeclaredClasses
	}
	return nil
}

func (x *StateDiff) GetDeclaredClasses() []*DeclaredClass {
	if x != nil {
		return x.DeclaredClasses
	}
	return nil
}

func (x *StateDiff) GetDeployedContracts() []*DeployedContract {
	if x != nil {
		return x.DeployedContracts
	}
	return nil
}

func (x *StateDiff) GetReplacedClasses() []*ReplacedClass {
	if x != nil {
		return x.ReplacedClasses
	}
	return nil
}

func (x *StateDiff) GetNonceDiffs() []*NonceDiff {
	if x != nil {
		return x.NonceDiffs
	}
	return nil
}

type NonceDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Nonce           string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *NonceDiff) Reset() {
	*x = NonceDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonceDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceDiff) ProtoMessage() {}

func (x *NonceDiff) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceDiff.ProtoReflect.Descriptor instead.
func (*NonceDiff) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{25}
}

func (x *NonceDiff) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *NonceDiff) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type ReplacedClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	ClassHash       string `protobuf:"bytes,2,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
}

func (x *ReplacedClass) Reset() {
	*x = ReplacedClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplacedClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplacedClass) ProtoMessage() {}

func (x *ReplacedClass) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplacedClass.ProtoReflect.Descriptor instead.
func (*ReplacedClass) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{26}
}

func (x *ReplacedClass) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ReplacedClass) GetClassHash() string {
	if x != nil {
		return x.ClassHash
	}
	return ""
}

type DeployedContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	ClassHash string `protobuf:"bytes,2,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
}

func (x *DeployedContract) Reset() {
	*x = DeployedContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployedContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployedContract) ProtoMessage() {}

func (x *DeployedContract) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployedContract.ProtoReflect.Descriptor instead.
func (*DeployedContract) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{27}
}

func (x *DeployedContract) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DeployedContract) GetClassHash() string {
	if x != nil {
		return x.ClassHash
	}
	return ""
}

type DeclaredClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassHash         string `protobuf:"bytes,1,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	CompiledClassHash string `protobuf:"bytes,2,opt,name=compiled_class_hash,json=compiledClassHash,proto3" json:"compiled_class_hash,omitempty"`
}

func (x *DeclaredClass) Reset() {
	*x = DeclaredClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclaredClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclaredClass) ProtoMessage() {}

func (x *DeclaredClass) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclaredClass.ProtoReflect.Descriptor instead.
func (*DeclaredClass) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{28}
}

func (x *DeclaredClass) GetClassHash() string {
	if x != nil {
		return x.ClassHash
	}
	return ""
}

func (x *DeclaredClass) GetCompiledClassHash() string {
	if x != nil {
		return x.CompiledClassHash
	}
	return ""
}

type ContractStorageDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address        string            `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	StorageEntries []*StorageEntries `protobuf:"bytes,2,rep,name=storage_entries,json=storageEntries,proto3" json:"storage_entries,omitempty"`
}

func (x *ContractStorageDiff) Reset() {
	*x = ContractStorageDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractStorageDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractStorageDiff) ProtoMessage() {}

func (x *ContractStorageDiff) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractStorageDiff.ProtoReflect.Descriptor instead.
func (*ContractStorageDiff) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{29}
}

func (x *ContractStorageDiff) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ContractStorageDiff) GetStorageEntries() []*StorageEntries {
	if x != nil {
		return x.StorageEntries
	}
	return nil
}

type StorageEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StorageEntries) Reset() {
	*x = StorageEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_starknet_type_v1_block_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageEntries) ProtoMessage() {}

func (x *StorageEntries) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageEntries.ProtoReflect.Descriptor instead.
func (*StorageEntries) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{30}
}

func (x *StorageEntries) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *StorageEntries) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_sf_starknet_type_v1_block_proto protoreflect.FileDescriptor

var file_sf_starknet_type_v1_block_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x04, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0a, 0x6c, 0x31, 0x5f, 0x64, 0x61, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x31,
	0x5f, 0x44, 0x41, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x08, 0x6c, 0x31, 0x44, 0x61, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x4a, 0x0a, 0x11, 0x6c, 0x31, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x31, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x0e, 0x6c, 0x31, 0x44, 0x61, 0x74, 0x61, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x41, 0x0a, 0x0c, 0x6c, 0x31, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x31, 0x47,
	0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x6c, 0x31, 0x47, 0x61, 0x73, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x50, 0x0a, 0x0a, 0x4c, 0x31, 0x47, 0x61, 0x73,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x66, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x46, 0x72, 0x69, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x57, 0x65, 0x69, 0x22, 0xc5, 0x09, 0x0a, 0x16, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x12, 0x5e, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x30, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65,
	0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x30, 0x48, 0x00, 0x52,
	0x13, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x30, 0x12, 0x5e, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65,
	0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x48, 0x00, 0x52,
	0x13, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x31, 0x12, 0x5e, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x33, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65,
	0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x48, 0x00, 0x52,
	0x13, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x33, 0x12, 0x61, 0x0a, 0x16, 0x6c, 0x31, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e,
	0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x31, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x14, 0x6c, 0x31, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x16, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76,
	0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x30, 0x48, 0x00, 0x52, 0x14, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x30, 0x12, 0x61, 0x0a, 0x16, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x31, 0x48, 0x00, 0x52, 0x14, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x12, 0x61, 0x0a,
	0x16, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x48, 0x00, 0x52, 0x14, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32,
	0x12, 0x61, 0x0a, 0x16, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x48, 0x00, 0x52, 0x14, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x33, 0x12, 0x5e, 0x0a, 0x15, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x30, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x30, 0x48, 0x00, 0x52, 0x13,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x30, 0x12, 0x74, 0x0a, 0x1d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x48, 0x00, 0x52, 0x1a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x12, 0x74, 0x0a, 0x1d, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x33, 0x48, 0x00, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x12,
	0x41, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x86, 0x04, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x09, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x46, 0x65, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x46, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x58, 0x0a, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x6a, 0x0a, 0x0c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x52, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x05, 0x0a, 0x12, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x52, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x48, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x47,
	0x0a, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x1d, 0x70, 0x65, 0x64, 0x65, 0x72,
	0x73, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b,
	0x70, 0x65, 0x64, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x1d, 0x70,
	0x6f, 0x73, 0x65, 0x69, 0x64, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x1b, 0x70, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3b, 0x0a, 0x1a, 0x65, 0x63, 0x5f, 0x6f, 0x70, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x17, 0x65, 0x63, 0x4f, 0x70, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x1a,
	0x65, 0x63, 0x64, 0x73, 0x61, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x18, 0x65, 0x63, 0x64, 0x73, 0x61, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x62, 0x69,
	0x74, 0x77, 0x69, 0x73, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1a, 0x62, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x1b,
	0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x19, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x22, 0xdf, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x30, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x46, 0x65,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xbf, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x22, 0xe3, 0x03, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x4c, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x70, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x79, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x1c,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a,
	0x1a, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x66, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x4c,
	0x31, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x22, 0xad, 0x01, 0x0a,
	0x14, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x30, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0xc3, 0x01, 0x0a,
	0x14, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x31, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x22, 0xc3, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x97, 0x04, 0x0a, 0x14, 0x44, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x33, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x69, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x61, 0x79, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x17,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x1c, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x66, 0x65, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x89, 0x02, 0x0a, 0x1a, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x46,
	0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x61, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0xc2, 0x03, 0x0a, 0x1a, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x33, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x69, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x61, 0x79, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a,
	0x1c, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3b,
	0x0a, 0x1a, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x66, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x7a, 0x0a, 0x0e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x33, 0x0a,
	0x05, 0x4c, 0x31, 0x47, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x4c, 0x31, 0x47,
	0x61, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x4c, 0x32, 0x47, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x05, 0x4c, 0x32, 0x47, 0x61, 0x73, 0x22, 0x56, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x22,
	0x48, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x09,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x22, 0x37, 0x0a, 0x09, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x22, 0x49, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x31, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x31, 0x44,
	0x61, 0x74, 0x61, 0x47, 0x61, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x31, 0x5f, 0x67, 0x61, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x31, 0x47, 0x61, 0x73, 0x22, 0x82, 0x01,
	0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x6c, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x66, 0x66, 0x22, 0xcf, 0x03, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66,
	0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x66,
	0x66, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x66, 0x66, 0x73, 0x12,
	0x3e, 0x0a, 0x1b, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x4d, 0x0a, 0x10, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x66, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0f, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x54,
	0x0a, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x44,
	0x69, 0x66, 0x66, 0x73, 0x22, 0x4c, 0x0a, 0x09, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x66,
	0x66, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x22, 0x59, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x4b, 0x0a,
	0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x5e, 0x0a, 0x0d, 0x44, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x7d, 0x0a, 0x13, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x66,
	0x66, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e,
	0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x0e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2a, 0x24, 0x0a, 0x0a, 0x4c, 0x31, 0x5f, 0x44, 0x41, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x41, 0x4c, 0x4c, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x42, 0x4e, 0x5a, 0x4c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2d, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x66, 0x2f, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70,
	0x62, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_sf_starknet_type_v1_block_proto_rawDescOnce sync.Once
	file_sf_starknet_type_v1_block_proto_rawDescData = file_sf_starknet_type_v1_block_proto_rawDesc
)

func file_sf_starknet_type_v1_block_proto_rawDescGZIP() []byte {
	file_sf_starknet_type_v1_block_proto_rawDescOnce.Do(func() {
		file_sf_starknet_type_v1_block_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_starknet_type_v1_block_proto_rawDescData)
	})
	return file_sf_starknet_type_v1_block_proto_rawDescData
}

var file_sf_starknet_type_v1_block_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sf_starknet_type_v1_block_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_sf_starknet_type_v1_block_proto_goTypes = []interface{}{
	(L1_DA_MODE)(0),                    // 0: sf.starknet.type.v1.L1_DA_MODE
	(*Block)(nil),                      // 1: sf.starknet.type.v1.Block
	(*L1GasPrice)(nil),                 // 2: sf.starknet.type.v1.L1GasPrice
	(*TransactionWithReceipt)(nil),     // 3: sf.starknet.type.v1.TransactionWithReceipt
	(*TransactionReceipt)(nil),         // 4: sf.starknet.type.v1.TransactionReceipt
	(*MessagesSent)(nil),               // 5: sf.starknet.type.v1.MessagesSent
	(*Event)(nil),                      // 6: sf.starknet.type.v1.Event
	(*ExecutionResources)(nil),         // 7: sf.starknet.type.v1.ExecutionResources
	(*InvokeTransactionV0)(nil),        // 8: sf.starknet.type.v1.InvokeTransactionV0
	(*InvokeTransactionV1)(nil),        // 9: sf.starknet.type.v1.InvokeTransactionV1
	(*InvokeTransactionV3)(nil),        // 10: sf.starknet.type.v1.InvokeTransactionV3
	(*L1HandlerTransaction)(nil),       // 11: sf.starknet.type.v1.L1HandlerTransaction
	(*DeclareTransactionV0)(nil),       // 12: sf.starknet.type.v1.DeclareTransactionV0
	(*DeclareTransactionV1)(nil),       // 13: sf.starknet.type.v1.DeclareTransactionV1
	(*DeclareTransactionV2)(nil),       // 14: sf.starknet.type.v1.DeclareTransactionV2
	(*DeclareTransactionV3)(nil),       // 15: sf.starknet.type.v1.DeclareTransactionV3
	(*DeployTransactionV0)(nil),        // 16: sf.starknet.type.v1.DeployTransactionV0
	(*DeployAccountTransactionV1)(nil), // 17: sf.starknet.type.v1.DeployAccountTransactionV1
	(*DeployAccountTransactionV3)(nil), // 18: sf.starknet.type.v1.DeployAccountTransactionV3
	(*ResourceBounds)(nil),             // 19: sf.starknet.type.v1.ResourceBounds
	(*Resource)(nil),                   // 20: sf.starknet.type.v1.Resource
	(*Receipt)(nil),                    // 21: sf.starknet.type.v1.Receipt
	(*ActualFee)(nil),                  // 22: sf.starknet.type.v1.ActualFee
	(*DataAvailability)(nil),           // 23: sf.starknet.type.v1.DataAvailability
	(*StateUpdate)(nil),                // 24: sf.starknet.type.v1.StateUpdate
	(*StateDiff)(nil),                  // 25: sf.starknet.type.v1.StateDiff
	(*NonceDiff)(nil),                  // 26: sf.starknet.type.v1.NonceDiff
	(*ReplacedClass)(nil),              // 27: sf.starknet.type.v1.ReplacedClass
	(*DeployedContract)(nil),           // 28: sf.starknet.type.v1.DeployedContract
	(*DeclaredClass)(nil),              // 29: sf.starknet.type.v1.DeclaredClass
	(*ContractStorageDiff)(nil),        // 30: sf.starknet.type.v1.ContractStorageDiff
	(*StorageEntries)(nil),             // 31: sf.starknet.type.v1.StorageEntries
}
var file_sf_starknet_type_v1_block_proto_depIdxs = []int32{
	0,  // 0: sf.starknet.type.v1.Block.l1_da_mode:type_name -> sf.starknet.type.v1.L1_DA_MODE
	2,  // 1: sf.starknet.type.v1.Block.l1_data_gas_price:type_name -> sf.starknet.type.v1.L1GasPrice
	2,  // 2: sf.starknet.type.v1.Block.l1_gas_price:type_name -> sf.starknet.type.v1.L1GasPrice
	3,  // 3: sf.starknet.type.v1.Block.transaction:type_name -> sf.starknet.type.v1.TransactionWithReceipt
	24, // 4: sf.starknet.type.v1.Block.state_update:type_name -> sf.starknet.type.v1.StateUpdate
	8,  // 5: sf.starknet.type.v1.TransactionWithReceipt.invoke_transaction_v0:type_name -> sf.starknet.type.v1.InvokeTransactionV0
	9,  // 6: sf.starknet.type.v1.TransactionWithReceipt.invoke_transaction_v1:type_name -> sf.starknet.type.v1.InvokeTransactionV1
	10, // 7: sf.starknet.type.v1.TransactionWithReceipt.invoke_transaction_v3:type_name -> sf.starknet.type.v1.InvokeTransactionV3
	11, // 8: sf.starknet.type.v1.TransactionWithReceipt.l1_handler_transaction:type_name -> sf.starknet.type.v1.L1HandlerTransaction
	12, // 9: sf.starknet.type.v1.TransactionWithReceipt.declare_transaction_v0:type_name -> sf.starknet.type.v1.DeclareTransactionV0
	13, // 10: sf.starknet.type.v1.TransactionWithReceipt.declare_transaction_v1:type_name -> sf.starknet.type.v1.DeclareTransactionV1
	14, // 11: sf.starknet.type.v1.TransactionWithReceipt.declare_transaction_v2:type_name -> sf.starknet.type.v1.DeclareTransactionV2
	15, // 12: sf.starknet.type.v1.TransactionWithReceipt.declare_transaction_v3:type_name -> sf.starknet.type.v1.DeclareTransactionV3
	16, // 13: sf.starknet.type.v1.TransactionWithReceipt.deploy_transaction_v0:type_name -> sf.starknet.type.v1.DeployTransactionV0
	17, // 14: sf.starknet.type.v1.TransactionWithReceipt.deploy_account_transaction_v1:type_name -> sf.starknet.type.v1.DeployAccountTransactionV1
	18, // 15: sf.starknet.type.v1.TransactionWithReceipt.deploy_account_transaction_v3:type_name -> sf.starknet.type.v1.DeployAccountTransactionV3
	4,  // 16: sf.starknet.type.v1.TransactionWithReceipt.receipt:type_name -> sf.starknet.type.v1.TransactionReceipt
	22, // 17: sf.starknet.type.v1.TransactionReceipt.actual_fee:type_name -> sf.starknet.type.v1.ActualFee
	5,  // 18: sf.starknet.type.v1.TransactionReceipt.messages_sent:type_name -> sf.starknet.type.v1.MessagesSent
	6,  // 19: sf.starknet.type.v1.TransactionReceipt.events:type_name -> sf.starknet.type.v1.Event
	7,  // 20: sf.starknet.type.v1.TransactionReceipt.execution_resources:type_name -> sf.starknet.type.v1.ExecutionResources
	23, // 21: sf.starknet.type.v1.ExecutionResources.data_availability:type_name -> sf.starknet.type.v1.DataAvailability
	19, // 22: sf.starknet.type.v1.InvokeTransactionV3.resource_bounds:type_name -> sf.starknet.type.v1.ResourceBounds
	19, // 23: sf.starknet.type.v1.DeclareTransactionV3.resource_bounds:type_name -> sf.starknet.type.v1.ResourceBounds
	19, // 24: sf.starknet.type.v1.DeployAccountTransactionV3.resource_bounds:type_name -> sf.starknet.type.v1.ResourceBounds
	20, // 25: sf.starknet.type.v1.ResourceBounds.L1Gas:type_name -> sf.starknet.type.v1.Resource
	20, // 26: sf.starknet.type.v1.ResourceBounds.L2Gas:type_name -> sf.starknet.type.v1.Resource
	22, // 27: sf.starknet.type.v1.Receipt.actual_fee:type_name -> sf.starknet.type.v1.ActualFee
	25, // 28: sf.starknet.type.v1.StateUpdate.state_diff:type_name -> sf.starknet.type.v1.StateDiff
	30, // 29: sf.starknet.type.v1.StateDiff.storage_diffs:type_name -> sf.starknet.type.v1.ContractStorageDiff
	29, // 30: sf.starknet.type.v1.StateDiff.declared_classes:type_name -> sf.starknet.type.v1.DeclaredClass
	28, // 31: sf.starknet.type.v1.StateDiff.deployed_contracts:type_name -> sf.starknet.type.v1.DeployedContract
	27, // 32: sf.starknet.type.v1.StateDiff.replaced_classes:type_name -> sf.starknet.type.v1.ReplacedClass
	26, // 33: sf.starknet.type.v1.StateDiff.nonce_diffs:type_name -> sf.starknet.type.v1.NonceDiff
	31, // 34: sf.starknet.type.v1.ContractStorageDiff.storage_entries:type_name -> sf.starknet.type.v1.StorageEntries
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_sf_starknet_type_v1_block_proto_init() }
func file_sf_starknet_type_v1_block_proto_init() {
	if File_sf_starknet_type_v1_block_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_starknet_type_v1_block_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L1GasPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionWithReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagesSent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeTransactionV0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeTransactionV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeTransactionV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L1HandlerTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclareTransactionV0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclareTransactionV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclareTransactionV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclareTransactionV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployTransactionV0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployAccountTransactionV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployAccountTransactionV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceBounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Receipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActualFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataAvailability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonceDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplacedClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployedContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclaredClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractStorageDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_starknet_type_v1_block_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sf_starknet_type_v1_block_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*TransactionWithReceipt_InvokeTransactionV0)(nil),
		(*TransactionWithReceipt_InvokeTransactionV1)(nil),
		(*TransactionWithReceipt_InvokeTransactionV3)(nil),
		(*TransactionWithReceipt_L1HandlerTransaction)(nil),
		(*TransactionWithReceipt_DeclareTransactionV0)(nil),
		(*TransactionWithReceipt_DeclareTransactionV1)(nil),
		(*TransactionWithReceipt_DeclareTransactionV2)(nil),
		(*TransactionWithReceipt_DeclareTransactionV3)(nil),
		(*TransactionWithReceipt_DeployTransactionV0)(nil),
		(*TransactionWithReceipt_DeployAccountTransactionV1)(nil),
		(*TransactionWithReceipt_DeployAccountTransactionV3)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_starknet_type_v1_block_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sf_starknet_type_v1_block_proto_goTypes,
		DependencyIndexes: file_sf_starknet_type_v1_block_proto_depIdxs,
		EnumInfos:         file_sf_starknet_type_v1_block_proto_enumTypes,
		MessageInfos:      file_sf_starknet_type_v1_block_proto_msgTypes,
	}.Build()
	File_sf_starknet_type_v1_block_proto = out.File
	file_sf_starknet_type_v1_block_proto_rawDesc = nil
	file_sf_starknet_type_v1_block_proto_goTypes = nil
	file_sf_starknet_type_v1_block_proto_depIdxs = nil
}
